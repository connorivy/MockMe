
// <auto-generated />
#pragma warning disable
#nullable enable
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Reflection;
using HarmonyLib;
using MockMe;
using MockMe.Mocks;
using MockMe.Mocks.ClassMemberMocks;
using MockMe.Mocks.ClassMemberMocks.CallTracker;

namespace MockMe.Generated.MockMe.Tests.ExampleClasses
{
    public class Calculator
    {
        public int Add(int x, int y) => x + y;

        public double Multiply(double x, double y) => x * y;

        public CalculatorType CalculatorType { get; set; }

        public void DivideByZero(double numToDivide) =>
            throw new InvalidOperationException("Cannot divide by 0");

        public bool IsOn() => true;

        public void TurnOff() { }
    }

    public enum CalculatorType
    {
        Standard,
        Scientific,
        Graphing,
    }
    internal class CalculatorMock
        : global::MockMe.Abstractions.SealedTypeMock<Calculator>
    {

        public CalculatorMock()
        {
            this.Setup = new CalculatorMockSetup();
            this.CallTracker = new CalculatorMockSetup.CalculatorMockCallTracker(this.Setup);
            this.Assert = new CalculatorMockSetup.CalculatorMockCallTracker.CalculatorMockAsserter(this.CallTracker);
            global::MockMe.MockStore<Calculator>.Store.TryAdd(this.MockedObject, this);
        }

        public CalculatorMockSetup Setup { get; }
        public CalculatorMockSetup.CalculatorMockCallTracker.CalculatorMockAsserter Assert { get; }
        private CalculatorMockSetup.CalculatorMockCallTracker CallTracker { get; }

        internal sealed class Patch3bd2c95aee1747e3bb09b73665755823
        {
            private static bool Prefix(Calculator __instance, ref global::System.Int32 __result, global::System.Int32 x, global::System.Int32 y)
            {
                if (global::MockMe.MockStore<Calculator>.TryGetValue<CalculatorMock>(__instance, out var mock))
                {
                    __result = mock.CallTracker.Add(x, y);
                    return false;
                }

                return true;
            }
        }
        internal sealed class Patch1cd8d4bafbdf459a8797b0156fc33ff2
        {
            private static bool Prefix(Calculator __instance, ref global::System.Double __result, global::System.Double x, global::System.Double y)
            {
                if (global::MockMe.MockStore<Calculator>.TryGetValue<CalculatorMock>(__instance, out var mock))
                {
                    __result = mock.CallTracker.Multiply(x, y);
                    return false;
                }

                return true;
            }
        }
        internal sealed class Patche2a230cd1d03422791a7f71b3497c46e
        {
            private static bool Prefix(Calculator __instance, ref CalculatorType __result)
            {
                if (global::MockMe.MockStore<Calculator>.TryGetValue<CalculatorMock>(__instance, out var mock))
                {
                    __result = mock.CallTracker.CalculatorType;
                    return false;
                }
                return true;
            }
        }

        internal sealed class Patch61607ea2bec640e7aa155fd5efc30776
        {
            private static bool Prefix(Calculator __instance, CalculatorType value)
            {
                if (global::MockMe.MockStore<Calculator>.TryGetValue<CalculatorMock>(__instance, out var mock))
                {
                    mock.CallTracker.CalculatorType = value;
                    return false;
                }
                return true;
            }
        }

        internal sealed class Patch23cd1a2f27f64aef86e5176fc9fec2b2
        {
            private static bool Prefix(Calculator __instance, global::System.Double numToDivide)
            {
                if (global::MockMe.MockStore<Calculator>.TryGetValue<CalculatorMock>(__instance, out var mock))
                {
                    mock.CallTracker.DivideByZero(numToDivide);
                    return false;
                }

                return true;
            }
        }
        internal sealed class Patchbc250df528ff4ef7adb7bef03ef4a145
        {
            private static bool Prefix(Calculator __instance, ref global::System.Boolean __result)
            {
                if (global::MockMe.MockStore<Calculator>.TryGetValue<CalculatorMock>(__instance, out var mock))
                {
                    __result = mock.CallTracker.IsOn();
                    return false;
                }

                return true;
            }
        }
        internal sealed class Patchac4efd0fdc3a49aa9133de9cbb45fcba
        {
            private static bool Prefix(Calculator __instance)
            {
                if (global::MockMe.MockStore<Calculator>.TryGetValue<CalculatorMock>(__instance, out var mock))
                {
                    mock.CallTracker.TurnOff();
                    return false;
                }

                return true;
            }
        }
        static CalculatorMock()
        {
            var harmony = new global::HarmonyLib.Harmony("com.mockme.patch");

            var originalPatch3bd2c95aee1747e3bb09b73665755823 = typeof(Calculator).GetMethod("Add", new Type[] { typeof(global::System.Int32), typeof(global::System.Int32) });
            var Patch3bd2c95aee1747e3bb09b73665755823 = typeof(Patch3bd2c95aee1747e3bb09b73665755823).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);

            harmony.Patch(originalPatch3bd2c95aee1747e3bb09b73665755823, prefix: new HarmonyMethod(Patch3bd2c95aee1747e3bb09b73665755823));

            var originalPatch1cd8d4bafbdf459a8797b0156fc33ff2 = typeof(Calculator).GetMethod("Multiply", new Type[] { typeof(global::System.Double), typeof(global::System.Double) });
            var Patch1cd8d4bafbdf459a8797b0156fc33ff2 = typeof(Patch1cd8d4bafbdf459a8797b0156fc33ff2).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);

            harmony.Patch(originalPatch1cd8d4bafbdf459a8797b0156fc33ff2, prefix: new HarmonyMethod(Patch1cd8d4bafbdf459a8797b0156fc33ff2));

            var originalPatche2a230cd1d03422791a7f71b3497c46e = typeof(Calculator).GetMethod("get_CalculatorType", new Type[] { });
            var Patche2a230cd1d03422791a7f71b3497c46e = typeof(Patche2a230cd1d03422791a7f71b3497c46e).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);

            harmony.Patch(originalPatche2a230cd1d03422791a7f71b3497c46e, prefix: new HarmonyMethod(Patche2a230cd1d03422791a7f71b3497c46e));

            var originalPatch61607ea2bec640e7aa155fd5efc30776 = typeof(Calculator).GetMethod("set_CalculatorType", new Type[] { typeof(CalculatorType) });
            var Patch61607ea2bec640e7aa155fd5efc30776 = typeof(Patch61607ea2bec640e7aa155fd5efc30776).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);

            harmony.Patch(originalPatch61607ea2bec640e7aa155fd5efc30776, prefix: new HarmonyMethod(Patch61607ea2bec640e7aa155fd5efc30776));

            var originalPatch23cd1a2f27f64aef86e5176fc9fec2b2 = typeof(Calculator).GetMethod("DivideByZero", new Type[] { typeof(global::System.Double) });
            var Patch23cd1a2f27f64aef86e5176fc9fec2b2 = typeof(Patch23cd1a2f27f64aef86e5176fc9fec2b2).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);

            harmony.Patch(originalPatch23cd1a2f27f64aef86e5176fc9fec2b2, prefix: new HarmonyMethod(Patch23cd1a2f27f64aef86e5176fc9fec2b2));

            var originalPatchbc250df528ff4ef7adb7bef03ef4a145 = typeof(Calculator).GetMethod("IsOn", new Type[] { });
            var Patchbc250df528ff4ef7adb7bef03ef4a145 = typeof(Patchbc250df528ff4ef7adb7bef03ef4a145).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);

            harmony.Patch(originalPatchbc250df528ff4ef7adb7bef03ef4a145, prefix: new HarmonyMethod(Patchbc250df528ff4ef7adb7bef03ef4a145));

            var originalPatchac4efd0fdc3a49aa9133de9cbb45fcba = typeof(Calculator).GetMethod("TurnOff", new Type[] { });
            var Patchac4efd0fdc3a49aa9133de9cbb45fcba = typeof(Patchac4efd0fdc3a49aa9133de9cbb45fcba).GetMethod("Prefix", global::System.Reflection.BindingFlags.Static | global::System.Reflection.BindingFlags.NonPublic);

            harmony.Patch(originalPatchac4efd0fdc3a49aa9133de9cbb45fcba, prefix: new HarmonyMethod(Patchac4efd0fdc3a49aa9133de9cbb45fcba));

        }

    }

    [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.0.0.0")]
    internal class CalculatorMockSetup : global::MockMe.Mocks.ClassMemberMocks.Setup.MemberMockSetup
    {

        internal class Add_Int32_Int32Collection : OriginalArgBag<global::System.Int32, global::System.Int32>
        {
            public Add_Int32_Int32Collection(global::System.Int32 x, global::System.Int32 y) : base(x, y)
            { }
            public global::System.Int32 x { get => this.Arg1; set => this.Arg1 = value; }
            public global::System.Int32 y { get => this.Arg2; set => this.Arg2 = value; }
        }
        private List<ArgBagWithMock<Add_Int32_Int32Collection>>? Add_Int32_Int32BagStore;
        public global::MockMe.Mocks.ClassMemberMocks.MemberMock<Add_Int32_Int32Collection, global::System.Int32> Add(Arg<global::System.Int32> x, Arg<global::System.Int32> y)
        {

            return SetupMethod<Add_Int32_Int32Collection, global::MockMe.Mocks.ClassMemberMocks.MemberMock<Add_Int32_Int32Collection, global::System.Int32>>(this.Add_Int32_Int32BagStore ??= new(), new ArgBag<global::System.Int32, global::System.Int32>(x, y));
            ;
        }
        internal class Multiply_Double_DoubleCollection : OriginalArgBag<global::System.Double, global::System.Double>
        {
            public Multiply_Double_DoubleCollection(global::System.Double x, global::System.Double y) : base(x, y)
            { }
            public global::System.Double x { get => this.Arg1; set => this.Arg1 = value; }
            public global::System.Double y { get => this.Arg2; set => this.Arg2 = value; }
        }
        private List<ArgBagWithMock<Multiply_Double_DoubleCollection>>? Multiply_Double_DoubleBagStore;
        public global::MockMe.Mocks.ClassMemberMocks.MemberMock<Multiply_Double_DoubleCollection, global::System.Double> Multiply(Arg<global::System.Double> x, Arg<global::System.Double> y)
        {

            return SetupMethod<Multiply_Double_DoubleCollection, global::MockMe.Mocks.ClassMemberMocks.MemberMock<Multiply_Double_DoubleCollection, global::System.Double>>(this.Multiply_Double_DoubleBagStore ??= new(), new ArgBag<global::System.Double, global::System.Double>(x, y));
            ;
        }
        internal class set_CalculatorType_CalculatorTypeCollection : OriginalArgBag<CalculatorType>
        {
            public set_CalculatorType_CalculatorTypeCollection(CalculatorType value) : base(value)
            { }
            public CalculatorType value { get => this.Arg1; set => this.Arg1 = value; }
        }
        internal class DivideByZero_DoubleCollection : OriginalArgBag<global::System.Double>
        {
            public DivideByZero_DoubleCollection(global::System.Double numToDivide) : base(numToDivide)
            { }
            public global::System.Double numToDivide { get => this.Arg1; set => this.Arg1 = value; }
        }
        private List<ArgBagWithMock<DivideByZero_DoubleCollection>>? DivideByZero_DoubleBagStore;
        public global::MockMe.Mocks.ClassMemberMocks.VoidMemberMock<DivideByZero_DoubleCollection> DivideByZero(Arg<global::System.Double> numToDivide)
        {

            return SetupMethod<DivideByZero_DoubleCollection, global::MockMe.Mocks.ClassMemberMocks.VoidMemberMock<DivideByZero_DoubleCollection>>(this.DivideByZero_DoubleBagStore ??= new(), new ArgBag<global::System.Double>(numToDivide));
            ;
        }
        private global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.Boolean>? IsOn_BagStore;
        public global::MockMe.Mocks.ClassMemberMocks.MemberMock<global::System.Boolean> IsOn()
        {

            return this.IsOn_BagStore ??= new();
            ;
        }
        private global::MockMe.Mocks.ClassMemberMocks.VoidMemberMock? TurnOff_BagStore;
        public global::MockMe.Mocks.ClassMemberMocks.VoidMemberMock TurnOff()
        {

            return this.TurnOff_BagStore ??= new();
            ;
        }
        private global::MockMe.Mocks.ClassMemberMocks.MemberMock<CalculatorType>? get_CalculatorType_BagStore;
        private List<ArgBagWithMock<PropertySetterArgs<CalculatorType>>>? set_CalculatorType_CalculatorTypeBagStore;
        public global::MockMe.Mocks.ClassMemberMocks.GetSetPropertyMock<CalculatorType> CalculatorType =>
            new(get_CalculatorType_BagStore ??= new(), set_CalculatorType_CalculatorTypeBagStore ??= new());
        [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.0.0.0")]
        internal class CalculatorMockCallTracker : MockCallTracker
        {
            private readonly CalculatorMockSetup setup;
            public CalculatorMockCallTracker(CalculatorMockSetup setup)
            {
                this.setup = setup;
            }

            private List<CalculatorMockSetup.Add_Int32_Int32Collection>? Add_Int32_Int32CallStore;
            public global::System.Int32 Add(global::System.Int32 x, global::System.Int32 y)
            {

                return MockCallTracker.CallMemberMock<Add_Int32_Int32Collection, global::System.Int32>(this.setup.Add_Int32_Int32BagStore, this.Add_Int32_Int32CallStore ??= new(), new(x, y));
            }
            private List<CalculatorMockSetup.Multiply_Double_DoubleCollection>? Multiply_Double_DoubleCallStore;
            public global::System.Double Multiply(global::System.Double x, global::System.Double y)
            {

                return MockCallTracker.CallMemberMock<Multiply_Double_DoubleCollection, global::System.Double>(this.setup.Multiply_Double_DoubleBagStore, this.Multiply_Double_DoubleCallStore ??= new(), new(x, y));
            }
            private List<CalculatorMockSetup.DivideByZero_DoubleCollection>? DivideByZero_DoubleCallStore;
            public void DivideByZero(global::System.Double numToDivide)
            {

                MockCallTracker.CallVoidMemberMock<DivideByZero_DoubleCollection>(this.setup.DivideByZero_DoubleBagStore, this.DivideByZero_DoubleCallStore ??= new(), new(numToDivide));
            }
            private int IsOn_CallStore;

            public global::System.Boolean IsOn()
            {
                this.IsOn_CallStore++;
                return MockCallTracker.CallMemberMock<global::System.Boolean>(this.setup.IsOn_BagStore);
            }

            private int TurnOff_CallStore;

            public void TurnOff()
            {
                this.TurnOff_CallStore++;
                MockCallTracker.CallVoidMemberMock(this.setup.TurnOff_BagStore);
            }

            private int get_CalculatorType_CallStore;
            private List<PropertySetterArgs<CalculatorType>>? set_CalculatorType_CalculatorTypeCallStore;
            public CalculatorType CalculatorType
            {
                get
                {

                    this.get_CalculatorType_CallStore++;
                    return MockCallTracker.CallMemberMock(this.setup.get_CalculatorType_BagStore);
                }
                set
                {

                    MockCallTracker.CallVoidMemberMock<PropertySetterArgs<CalculatorType>>(this.setup.set_CalculatorType_CalculatorTypeBagStore, this.set_CalculatorType_CalculatorTypeCallStore ??= new(), new PropertySetterArgs<CalculatorType>(value));
                }
            }
            [global::System.CodeDom.Compiler.GeneratedCode("MockMe", "1.0.0.0")]
            internal class CalculatorMockAsserter : MockAsserter
            {
                private readonly CalculatorMockSetup.CalculatorMockCallTracker tracker;
                public CalculatorMockAsserter(CalculatorMockSetup.CalculatorMockCallTracker tracker)
                {
                    this.tracker = tracker;
                }

                public global::MockMe.Asserters.MemberAsserter Add(Arg<global::System.Int32> x, Arg<global::System.Int32> y)
                {

                    return GetMemberAsserter(this.tracker.Add_Int32_Int32CallStore, new ArgBag<global::System.Int32, global::System.Int32>(x, y));
                }
                public global::MockMe.Asserters.MemberAsserter Multiply(Arg<global::System.Double> x, Arg<global::System.Double> y)
                {

                    return GetMemberAsserter(this.tracker.Multiply_Double_DoubleCallStore, new ArgBag<global::System.Double, global::System.Double>(x, y));
                }
                public global::MockMe.Asserters.MemberAsserter DivideByZero(Arg<global::System.Double> numToDivide)
                {

                    return GetMemberAsserter(this.tracker.DivideByZero_DoubleCallStore, new ArgBag<global::System.Double>(numToDivide));
                }
                public global::MockMe.Asserters.MemberAsserter IsOn() =>
                    new(this.tracker.IsOn_CallStore);

                public global::MockMe.Asserters.MemberAsserter TurnOff() =>
                    new(this.tracker.TurnOff_CallStore);

                public global::MockMe.Asserters.GetSetPropertyAsserter<CalculatorType> CalculatorType =>
                    new(this.tracker.get_CalculatorType_CallStore, this.tracker.set_CalculatorType_CalculatorTypeCallStore);
            }

        }

    }

}
#pragma warning restore
